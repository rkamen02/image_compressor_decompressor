/*
 * compress40.c
 * by Samuel Weaver (sweave05) and Ross Kamen (rkamen02)
 * October 21, 2016
 *
 * Implementation for compress40.h
 */

#include <bitpack.h>
#include <assert.h>
#include <except.h>

Except_T Bitpack_Overflow = { "Overflow packing bits" };

bool is_positive( int64_t n)
{
	uint64_t sign = (uint64_t)n >> 63;
	
	return sign == 0;
}

bool Bitpack_fitsu(uint64_t n, unsigned width)
{
	uint64_t max;
	
	if ( width >= 64) {
		return true;
	}

	if (width == 0) {
		return false;
	}
	
	max = ((uint64_t)1 << width) - 1;
	
	if ( n > max ) {
		return false;
	}
	
	return true;
}

bool Bitpack_fitss( int64_t n, unsigned width)
{
	uint64_t max;

	if ( width >= 64) {
		return true;
	}

	if ( width == 0) {
		return false;
	}

	if ( width == 1) {
		if ( (n == 0) || (n == -1)) {
			return true;
		}
		return false;
	}

	if ( is_positive( n)) {
		return Bitpack_fitsu( n, width - 1);
	}

	max = (uint64_t)1 << (width - 1) ;

	if ((uint64_t)(-1 * n) > max) {
		return false;
	}
	return true;
}

uint64_t Bitpack_getu(uint64_t word, unsigned width, unsigned lsb)
{
	assert( width + lsb <= 64);

	if (width == 0) {
		return 0;
	}
	 
	word = word << (64 - (width + lsb));
	word = word >> (64 - width);
		
	return word;
}

int64_t Bitpack_gets(uint64_t word, unsigned width, unsigned lsb)
{
	assert( width + lsb <= 64);
		
	int64_t sign, null;
	
	if (width == 0) {
		return 0;
	}

	sign = Bitpack_getu( word,         1, width + lsb - 1);
	word = Bitpack_getu( word, width - 1,             lsb); 
		
	if ( sign == 1 ) {
		null = ~0;
		null = null << (width - 1);	
	        word = null | word;
	}
	
	return word;
}

uint64_t Bitpack_newu(uint64_t word, 
		      unsigned width, 
		      unsigned lsb, 
		      uint64_t value)
{	
	assert( width + lsb <= 64);
	uint64_t mask, null;

	if (!Bitpack_fitsu( value, width)) {
		RAISE( Bitpack_Overflow);
	}
	
	mask =  0;
	null = ~0;
	if ( lsb + width < 64) {
		mask = null << (width + lsb);
	}
 	if ( lsb  > 0) {
		mask = mask | (null >> (64 - lsb));
	}
	word = word & mask;

	value = Bitpack_getu( value, width, 0);
	value = value << lsb;

	return word | value;
}

uint64_t Bitpack_news(uint64_t word, 
		      unsigned width,
		      unsigned lsb, 
		      int64_t value)
{
	assert( width + lsb <= 64);
	uint64_t value_pull;

	if (!Bitpack_fitss( value, width)) {
		RAISE( Bitpack_Overflow);
	}

	value_pull = Bitpack_getu( value, width, 0);
	word = Bitpack_newu( word, width, lsb, value_pull);
	
	return word;
}
